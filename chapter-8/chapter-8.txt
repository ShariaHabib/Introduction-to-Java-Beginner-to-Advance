* Java doesn't support multiple inheritance theoritically.

* Superclasses and Subclasses: Inheritance is achieved in Java using the extends keyword to create a subclass, which inherits fields and methods from a superclass. Constructors in the superclass can be called using the super keyword in the subclass, and the @Override annotation is used to indicate that a method in the subclass is intended to override a method in the superclass.

* Using super: The super keyword in Java is used to access members of the superclass from the subclass. This can be used to call constructors, access fields, or invoke methods in the superclass. In a constructor, the super() call must be the first statement, and can be used to call a constructor in the superclass with arguments.

* Method Overriding: Method overriding is a technique in Java that allows a subclass to provide its own implementation of a method that is already defined in its superclass. This is done using the @Override annotation, which informs the compiler that the method is intended to override a method in the superclass. Method overriding is useful for creating more specialized behavior in subclasses.

* Access Modifiers: Access modifiers in Java control the visibility of classes and their members. The public modifier makes a member accessible from anywhere, the protected modifier makes a member accessible within its package and to subclasses, the private modifier makes a member accessible only within its own class, and the default modifier makes a member accessible within its package.

* Using final: The final keyword in Java can be used to prevent modification of a method, variable, or class. When used with a method, it prevents the method from being overridden in a subclass. When used with a variable, it makes the variable a constant that cannot be changed. When used with a class, it prevents the class from being subclassed.

* Abstract Classes: Abstract classes in Java cannot be instantiated and are intended to be extended by subclasses. Abstract classes can contain abstract methods that are defined by subclasses, and may also contain concrete methods with implementations. Abstract classes provide a way to define a common interface for a set of subclasses.

* Interfaces: Interfaces in Java define a set of methods that must be implemented by any class that implements the interface. An interface can be thought of as a contract that defines a set of behaviors that a class must provide. Multiple inheritance is supported in Java through the use of interfaces.